{
  "compiler": {
    "version": "0.8.7+commit.e28d00a7"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "contractId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "tokenContract",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "hashlock",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "requestedcontract",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "requestedid",
            "type": "uint256"
          }
        ],
        "name": "HTLCERC721New",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "contractId",
            "type": "uint256"
          }
        ],
        "name": "HTLCERC721Refund",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "contractId",
            "type": "uint256"
          }
        ],
        "name": "HTLCERC721Withdraw",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "AllTrades",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_Address",
            "type": "address"
          }
        ],
        "name": "MyTrades",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_Amount",
            "type": "uint256"
          }
        ],
        "name": "SetverificationFees",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_collectibleAddress",
            "type": "address"
          }
        ],
        "name": "SubmitContract",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "contracts",
        "outputs": [
          {
            "internalType": "address",
            "name": "Sender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "tokenContract",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "hashlock",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "requestedcontract",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "requestedid",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "withdrawn",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "refunded",
            "type": "bool"
          },
          {
            "internalType": "string",
            "name": "preimage",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_contractId",
            "type": "uint256"
          }
        ],
        "name": "getContract",
        "outputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "tokenContract",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "requestedContract",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "requestedId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "hashlock",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "withdrawn",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "refunded",
            "type": "bool"
          },
          {
            "internalType": "string",
            "name": "preimage",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_receiver",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_hashlock",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_tokenContract",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_requestedcontract",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_requestedid",
            "type": "uint256"
          }
        ],
        "name": "newContract",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "_contractId",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_contractId",
            "type": "uint256"
          }
        ],
        "name": "refund",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_address",
            "type": "address"
          }
        ],
        "name": "validateaddress",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "whiteListedAddress",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_contractId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_preimage",
            "type": "string"
          }
        ],
        "name": "withdraw",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "newContract(address,string,address,uint256,address,uint256)": {
          "details": "Sender / Payer sets up a new hash time lock contract depositing the funds and providing the reciever and terms. NOTE: _receiver must first call approve() on the token contract.       See isApprovedOrOwner check in tokensTransferable modifier.",
          "params": {
            "_hashlock": "A sha-2 sha256 hash hashlock.",
            "_receiver": "Receiver of the tokens.",
            "_requestedcontract": "contract address for the requestednft.",
            "_requestedid": "tokenid for the requested id.",
            "_tokenContract": "ERC20 Token contract address.",
            "_tokenId": "Id of the token to lock up."
          }
        },
        "refund(uint256)": {
          "details": "Called by the sender if there was no withdraw AND the time lock has expired. This will restore ownership of the tokens to the sender.",
          "params": {
            "_contractId": "Id of HTLC to refund from."
          },
          "returns": {
            "_0": "bool true on success"
          }
        },
        "withdraw(uint256,string)": {
          "details": "Called by the receiver once they know the preimage of the hashlock. This will transfer ownership of the locked tokens to their address.",
          "params": {
            "_contractId": "Id of the HTLC.",
            "_preimage": "sha256(_preimage) should equal the contract hashlock."
          },
          "returns": {
            "_0": "bool true on success"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/HashedTimelockERC721.sol": "HashedTimelockERC721"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": []
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "keccak256": "0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e",
      "license": "MIT",
      "urls": [
        "bzz-raw://4c827c981a552d1c76c96060e92f56b52bc20c6f9b4dbf911fe99ddbfb41f2ea",
        "dweb:/ipfs/QmW8xvJdzHrr8Ry34C7viBsgG2b8T1mL4BQWJ5CdfD9JLB"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f",
      "license": "MIT",
      "urls": [
        "bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f",
        "dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
      "license": "MIT",
      "urls": [
        "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
        "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "keccak256": "0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45",
      "license": "MIT",
      "urls": [
        "bzz-raw://f86000c6885fb5a0a8bd5cd2595d302f0b4038411d66b85b07fa10590f844c2e",
        "dweb:/ipfs/QmeZuXaxdr7NH2wUAprx3BcLTke9RtcptAZgRKfQVHops5"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "keccak256": "0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5",
      "license": "MIT",
      "urls": [
        "bzz-raw://afbedcf17f31db719e6fdc56caa8f458799c5fa2eb94cb1e94ef18f89af85768",
        "dweb:/ipfs/QmVmqRdBfbgYThpZSoAJ5o9mnAMjx8mCHHjv3Rh8cQAAg3"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "keccak256": "0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038",
      "license": "MIT",
      "urls": [
        "bzz-raw://899c87a849a94c848818d0afede6961d2c87665af1dd23a5c983e78981a65691",
        "dweb:/ipfs/QmUeFDffQRDmX87FX3MRxN3bmpUxDTWpWLwPJzeAJ3yF6H"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "keccak256": "0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf",
      "license": "MIT",
      "urls": [
        "bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34",
        "dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR"
      ]
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
      "license": "MIT",
      "urls": [
        "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
        "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
      ]
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
      "license": "MIT",
      "urls": [
        "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
        "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
      ]
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
      "license": "MIT",
      "urls": [
        "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
        "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
      ]
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
      "license": "MIT",
      "urls": [
        "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
        "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
      ]
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "contracts/HashedTimelockERC721.sol": {
      "keccak256": "0x215a9a1494434c4511477c51fc39799f7430dc50ddeffbb53d8f3bf126759228",
      "license": "MIT",
      "urls": [
        "bzz-raw://903408ce5c2540d06c21ade6e0676d3004d47166d8449b8f03ceb4d4d15bdeaa",
        "dweb:/ipfs/QmWEfZfoK97GSU6gVSyTXT31TemNzTc9fJyFWYhwBJkHEY"
      ]
    }
  },
  "version": 1
}
